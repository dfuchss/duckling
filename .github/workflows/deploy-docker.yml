name: Docker Push

on:
  workflow_dispatch:
  schedule:
    - cron: "0 3 * * 1"


env:
  IMAGE_NAME: duckling

jobs:  
  check_date:
    runs-on: ubuntu-latest
    name: Check latest commit
    outputs:
      should_run: ${{ steps.should_run.outputs.should_run }}
    steps:
      - uses: actions/checkout@v3
        with: 
          ref: main
      - name: Print latest Commit
        run: git rev-parse main

      - id: should_run
        continue-on-error: true
        name: Check latest Commit is less than a week
        if: ${{ github.event_name == 'schedule' }}
        run: test -z $(git rev-list --after="1 week"  main) && echo "::set-output name=should_run::false"

  push:
    needs: check_date
    if: ${{ needs.check_date.outputs.should_run != 'false' }}
    
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v3
        with:
          ref: main
      
      - name: Repair Docker Image (see https://github.com/facebook/duckling/issues/671)
        run:  sed -i 's/  apt-get install -qq -y libpcre3 libpcre3-dev build-essential --fix-missing --no-install-recommends \&\& \\/  apt-get install -qq -y libpcre3 libpcre3-dev build-essential pkg-config --fix-missing --no-install-recommends \&\& \\/g' Dockerfile
      
      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "deploy" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
